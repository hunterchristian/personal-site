@mixin fullScreen() {
  height: $sectionHeight;
  width: 100%;
}

@mixin positionBottomOfSection() {
  position: absolute;
  bottom: calc(100% - #{$sectionHeight});
}

@mixin fadeIn($delay, $duration) {
  /* make keyframes that tell the start state and the end state of our object */
  @-webkit-keyframes fadeIn { from { opacity:0; } to { opacity:1; } }
  @-moz-keyframes fadeIn { from { opacity:0; } to { opacity:1; } }
  @keyframes fadeIn { from { opacity:0; } to { opacity:1; } }

  opacity:0;  /* make things invisible upon start */
  -webkit-animation:fadeIn ease-in 1;  /* call our keyframe named fadeIn, use animattion ease-in and repeat it only 1 time */
  -moz-animation:fadeIn ease-in 1;
  animation:fadeIn ease-in 1;

  -webkit-animation-fill-mode:forwards;  /* this makes sure that after animation is done we remain at the last keyframe value (opacity: 1)*/
  -moz-animation-fill-mode:forwards;
  animation-fill-mode:forwards;

  -webkit-animation-duration:$duration;
  -moz-animation-duration:$duration;
  animation-duration:$duration;

  -webkit-animation-delay: $delay;
  -moz-animation-delay: $delay;
  animation-delay: $delay;
}

@mixin fadeUp($delay, $duration) {
  /* make keyframes that tell the start state and the end state of our object */
  @-webkit-keyframes fadeUp {
    0% { opacity:0; top: 43%; }
    20% { opacity:1; top: 38%; }
    60% { opacity:1; top: 41%; }
    100% { opacity:1; top: 40%; }
  }
  @-moz-keyframes fadeUp { 0% { opacity:0; top: 45%; } 20% { opacity:1; top: 38%; } 100% { opacity:1; top: 40%; } }
  @keyframes fadeUp { 0% { opacity:0; top: 45%; } 20% { opacity:1; top: 38%; } 100% { opacity:1; top: 40%; } }

  opacity:0;  /* make things invisible upon start */
  top: 40%;
  -webkit-animation:fadeUp ease-in 1;  /* call our keyframe named fadeIn, use animattion ease-in and repeat it only 1 time */
  -moz-animation:fadeUp ease-in 1;
  animation:fadeUp ease-in 1;

  -webkit-animation-fill-mode:forwards;  /* this makes sure that after animation is done we remain at the last keyframe value (opacity: 1)*/
  -moz-animation-fill-mode:forwards;
  animation-fill-mode:forwards;

  -webkit-animation-duration:$duration;
  -moz-animation-duration:$duration;
  animation-duration:$duration;

  -webkit-animation-delay: $delay;
  -moz-animation-delay: $delay;
  animation-delay: $delay;
}

@mixin gradient() {
  background: -webkit-linear-gradient(rgba(255,255,255,0), rgba(255,255,255,1)); /* For Safari 5.1 to 6.0 */
  background: -o-linear-gradient(rgba(255,255,255,0), rgba(255,255,255,1)); /* For Opera 11.1 to 12.0 */
  background: -moz-linear-gradient(rgba(255,255,255,0), rgba(255,255,255,1)); /* For Firefox 3.6 to 15 */
  background: linear-gradient(rgba(255,255,255,0), rgba(255,255,255,1)); /* Standard syntax */
}

@mixin transform($value) {
  -webkit-transform: $value;
  -moz-transform: $value;
  -o-transform: $value;
  -ms-transform: $value;
  transform: $value;
}

@mixin verticalCenter($position: absolute) {
  @include transform(translateY(-50%));
  position: $position;
  top: 50%;
}

@mixin horizontalCenter($position: absolute) {
  @include transform(translateX(-50%));
  position: $position;
  left: 50%;
}

@mixin transition($transition...) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

@mixin respondTo($media) {
  @if $media == handhelds {
    @media only screen
      and (max-device-width: $handheldBreakpoint - 1) {
        @content;
    }
  }
  @else if $media == wide-handhelds {
    @media only screen
      and (min-device-width: $handheldBreakpoint)
      and (max-device-width: $wideHandheldBreakpoint - 1) {
        @content;
    }
  }
  @else if $media == tablets {
    @media only screen
      and (min-device-width: $wideHandheldBreakpoint)
      and (max-device-width: $tabletBreakpoint - 1) {
        @content;
    }
  }
}